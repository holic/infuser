// Generated by CoffeeScript 1.4.0
(function() {
  var app, coffee, express, find, fs, glob, http, npm, path, resolve, server, url;

  express = require('express');

  http = require('http');

  url = require('url');

  fs = require('fs');

  path = require('path');

  glob = require('glob');

  npm = require('../package.json');

  coffee = require('coffee-script');

  app = express();

  server = http.createServer(app);

  resolve = function(relative) {
    return path.resolve(process.env.HOME, ".js", relative);
  };

  find = function(relative) {
    console.log(resolve(relative));
    return glob.sync(resolve(relative));
  };

  app.get('/:domain.js', function(req, res, next) {
    var domain, file, files, lines, parts, pattern, patterns, source, sub, _i, _j, _len, _len1;
    domain = req.params.domain;
    parts = domain.split('.');
    patterns = [];
    patterns.unshift("_after/*.js", "_after.js");
    patterns.unshift("" + domain + "/*.js", "" + domain + ".js");
    while (true) {
      sub = parts.join('.');
      patterns.unshift("." + sub + "/*.js", "." + sub + ".js");
      parts.shift();
      if (!parts.length) {
        break;
      }
    }
    patterns.unshift("_before/*.js", "_before.js");
    files = [];
    for (_i = 0, _len = patterns.length; _i < _len; _i++) {
      pattern = patterns[_i];
      files = files.concat(find(pattern));
      files = files.concat(find(pattern.replace(/\.js$/, '.coffee')));
    }
    lines = ["//  " + npm.name + " [" + npm.version + "]"];
    for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
      file = files[_j];
      lines.push("", "/*", "**  " + file, "*/", "");
      try {
        source = fs.readFileSync(file, 'utf8');
        if ('.coffee' === path.extname(file)) {
          source = coffee.compile(source, {
            bare: true
          });
        }
        lines.push("(function() {", source, "}).call(this);");
      } catch (e) {
        lines.push("// ERROR: " + e.message);
      }
      lines.push("");
    }
    return res.format({
      js: function() {
        return res.send(lines.join("\n"));
      }
    });
  });

  server.listen(process.env.PORT || 3131, function() {
    var address, port, _ref;
    _ref = server.address(), address = _ref.address, port = _ref.port;
    return console.log("Listening on " + address + ":" + port);
  });

}).call(this);
