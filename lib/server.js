// Generated by CoffeeScript 1.4.0
(function() {
  var app, cert, coffee, express, find, fs, glob, https, key, npm, path, patterns, resolve, server, url,
    __slice = [].slice;

  express = require('express');

  https = require('https');

  url = require('url');

  fs = require('fs');

  path = require('path');

  glob = require('glob');

  npm = require('../package.json');

  coffee = require('coffee-script');

  key = fs.readFileSync('./ssl/key.pem', 'binary');

  cert = fs.readFileSync('./ssl/cert.pem', 'binary');

  app = express();

  server = https.createServer({
    key: key,
    cert: cert
  }, app);

  app.configure(function() {
    return app.use(express.logger('dev'));
  });

  patterns = function(domain) {
    var list, parts, sub;
    parts = domain.split('.');
    list = [];
    list.unshift("_after/*", "_after");
    list.unshift("" + domain + "/*", "" + domain);
    while (true) {
      sub = parts.join('.');
      list.unshift("." + sub + "/*", "." + sub);
      parts.shift();
      if (!parts.length) {
        break;
      }
    }
    list.unshift("_before/*", "_before");
    return list;
  };

  resolve = function(relative) {
    return path.resolve(process.env.HOME, ".infuser", relative);
  };

  find = function() {
    var domain, ext, exts, list, pattern, _i, _j, _len, _len1, _ref;
    domain = arguments[0], exts = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    list = [];
    _ref = patterns(domain);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pattern = _ref[_i];
      for (_j = 0, _len1 = exts.length; _j < _len1; _j++) {
        ext = exts[_j];
        list = list.concat(glob.sync(resolve("" + pattern + "." + ext)));
      }
    }
    return list;
  };

  app.get('/:domain.js', function(req, res, next) {
    var domain, file, files, lines, source, _i, _len;
    domain = req.params.domain;
    if (!domain) {
      return next();
    }
    files = find(domain, "js", "coffee");
    lines = ["//  " + npm.name + " [" + npm.version + "]"];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      lines.push("", "/*", "**  " + file, "*/", "");
      try {
        source = fs.readFileSync(file, 'utf8');
        if ('.coffee' === path.extname(file)) {
          source = coffee.compile(source, {
            bare: true
          });
        }
        lines.push("(function() {", source, "}).call(this);");
      } catch (e) {
        lines.push("// ERROR: " + e.message);
        lines.push("console.error(\"[infuser]\", " + (JSON.stringify(file)) + ", \"\\n\\n\", " + (JSON.stringify(e.stack)) + ");");
      }
      lines.push("");
    }
    return res.format({
      js: function() {
        return res.send(lines.join("\n"));
      }
    });
  });

  app.get('/:domain.css', function(req, res, next) {
    var domain, file, files, lines, source, _i, _len;
    domain = req.params.domain;
    if (!domain) {
      return next();
    }
    files = find(domain, "css");
    lines = ["/*  " + npm.name + " [" + npm.version + "]  */"];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      lines.push("", "/*", "**  " + file, "*/", "");
      try {
        source = fs.readFileSync(file, 'utf8');
        lines.push(source);
      } catch (e) {
        lines.push("/* ERROR: " + e.message + " */");
      }
      lines.push("");
    }
    return res.format({
      css: function() {
        return res.send(lines.join("\n"));
      }
    });
  });

  server.listen(process.env.PORT || 3131, function() {
    var address, port, _ref;
    _ref = server.address(), address = _ref.address, port = _ref.port;
    return console.log("Listening on " + address + ":" + port);
  });

}).call(this);
